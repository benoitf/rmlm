# SPDX-License-Identifier: Apache-2.0

name: release

permissions:
  contents: write
  attestations: write
  id-token: write
  pull-requests: write
  repository-projects: write

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true
      branch:
        description: 'Branch to use for the release'
        required: true
        default: main
env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

jobs:

  tag:
    name: Tagging
    runs-on: ubuntu-24.04
    outputs:
      githubTag: ${{ steps.TAG_UTIL.outputs.githubTag}}
      desktopVersion: ${{ steps.TAG_UTIL.outputs.desktopVersion}}
      releaseId: ${{ steps.create_release.outputs.id}}

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ github.event.inputs.branch }}
      - uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Generate tag utilities
        id: TAG_UTIL
        run: |
            TAG_PATTERN=${{ github.event.inputs.version }}
            echo "githubTag=v$TAG_PATTERN" >> ${GITHUB_OUTPUT}
            echo "desktopVersion=$TAG_PATTERN" >> ${GITHUB_OUTPUT}

      - name: tag
        run: |
          git config --local user.name ${{ github.actor }}
          git config --local user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"

          # Add the new version in Cargo.toml file
          sed -i 's/^version = ".*"/version = "${{ steps.TAG_UTIL.outputs.desktopVersion }}"/' Cargo.toml
          # update lock file
          cargo check
          git add Cargo.toml Cargo.lock

          # commit the changes
          git commit -m "chore: ü•Å tagging ${{ steps.TAG_UTIL.outputs.githubTag }} ü•≥"
          echo "Tagging with ${{ steps.TAG_UTIL.outputs.githubTag }}"
          git tag ${{ steps.TAG_UTIL.outputs.githubTag }}
          git push origin ${{ steps.TAG_UTIL.outputs.githubTag }}
      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@440c8c1cb0ed28b9f43e4d1d670870f059653174 # v1.16.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag: ${{ steps.TAG_UTIL.outputs.githubTag }}
          name: ${{ steps.TAG_UTIL.outputs.githubTag }}
          draft: true
          prerelease: false
      - name: Create the PR to bump the version in the main branch (only if we're tagging from main branch)
        if: ${{ github.event.inputs.branch == 'main' }}
        run: |
          git config --local user.name ${{ github.actor }}
          git config --local user.email "fbenoit@redhat.com"

          CURRENT_VERSION=$(echo "${{ steps.TAG_UTIL.outputs.desktopVersion }}")
          major=${CURRENT_VERSION%%.*}
          rest=${CURRENT_VERSION#*.}
          minor=${rest%%.*}
          patch=${CURRENT_VERSION##*.}
          bumpedVersion="$major.$minor.$((patch + 1))"
          bumpedBranchName="bump-to-${bumpedVersion}"
          git checkout -b "${bumpedBranchName}"
          sed -i "s/^version = \".*\"/version = \"${bumpedVersion}\"/" Cargo.toml
          cargo check
          git add Cargo.toml Cargo.lock
          git commit -s --amend -m "chore: bump version to ${bumpedVersion}"
          git push origin "${bumpedBranchName}"
          echo -e "üì¢ Bump version to ${bumpedVersion}\n\n${{ steps.TAG_UTIL.outputs.desktopVersion }} has been released.\n\n Time to switch to the new ${bumpedVersion} version ü•≥" > /tmp/pr-title
          pullRequestUrl=$(gh pr create --title "chore: üì¢ Bump version to ${bumpedVersion}" --body-file /tmp/pr-title --head "${bumpedBranchName}" --base "main")
          echo "üì¢ Pull request created: ${pullRequestUrl}"
          echo "‚û°Ô∏è Flag the PR as being ready for review"
          gh pr ready "${pullRequestUrl}"
          echo "üîÖ Mark the PR as being ok to be merged automatically"
          gh pr merge "${pullRequestUrl}" --auto --rebase
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}

  build:
    name: Build
    needs: tag
    runs-on: macos-15
    timeout-minutes: 60
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ needs.tag.outputs.githubTag}}

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: x86_64-apple-darwin, aarch64-unknown-linux-musl, x86_64-pc-windows-gnu, x86_64-unknown-linux-musl

      - name: install dependencies to make cross-compilation
        run: |
         brew install filosottile/musl-cross/musl-cross
         brew install mingw-w64

      - name: build all targets
        run: make release

      - name: attach all artifacts
        run: make release

      - name: Upload assets to the release
        run: |
         # Upload the asset to the release using the GitHub CLI
         gh release upload ${{ needs.tag.outputs.githubTag }} ./release/rmlm-* --repo $GITHUB_REPOSITORY

  release:
    needs: [tag, build]
    name: Release
    runs-on: ubuntu-24.04
    steps:
      - name: id
        run: echo the release id is ${{ needs.tag.outputs.releaseId}}

      - name: Publish release
        uses: StuYarrow/publish-release@01f2a1365bacd77bad861873a7fdf274ab49eefd # v1.1.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          id: ${{ needs.tag.outputs.releaseId}}
